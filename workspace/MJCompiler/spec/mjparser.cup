package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

import java_cup.runtime.*;
import org.apache.log4j.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


nonterminal WhileStatements, Or, ForStatements, ElseStatement, Then, IfStart, ElseStart, While, DeclarationList, Declaration, ConstDecl, ConstantList, VarDecl, VariablesList, ArrayBrackets, MethodDeclList, MethodDecl, MethodParameterList, FormPars, MethodVariableList, MethodStatementList, Statement, PrintConstant, DesignatorStatement, DesignatorList, DesignatorListElement, ActParams, ActPars, Relop, Addop, Mulop;
terminal PROG, LBRACE, RBRACE, CONST, VOID, SEMICOLON, READ, PRINT, INCREMENT, DECREMENT, NEW, LPAREN, RPAREN, COMMA, DOT, LBRACKET, RBRACKET, EQUAL, ISEQUAL, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, PLUS, MINUS, MULTIPLY, DIVIDE, MODUO;


terminal IF, ELSE, WHILE, BREAK, CONTINUE, RETURN, FOREACH, ARROW;
nonterminal StatementsList;
terminal CLASS, THIS, COLON, DO, EXTENDS, ENUM;

terminal String IDENT;
terminal Character CHARCONST;
terminal Integer NUMCONST;
terminal Boolean BOOLCONST;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramIdentificator, ConstantDeclaration, Variable, MethodTypeName, OneParam, FunctionName, Designator, MultipleDesignator, DesignatorName, ForEach;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Constant, Expr, TermList, Factor, Parameter, FactorList, Term, Condition, CondTerm, CondFact, AssignmentExpr;
 

precedence left ELSE;


Program ::= (Program) PROG ProgramIdentificator:programIdent DeclarationList LBRACE MethodDeclList RBRACE ;

ProgramIdentificator ::= (ProgramIdentificator) IDENT:progIdent ;

DeclarationList ::= (Declarations) DeclarationList Declaration 
				|
				(NoDeclarations) /*epsilon*/
				;

Declaration ::= (CnstDeclaration) ConstDecl 
				|
				(VariableDeclaration) VarDecl 
				/*|
				(ClassDeclaration) ClassDecl*/ 
				;
				
ConstDecl ::= (ConstDecl) CONST Type ConstantList SEMICOLON ;


ConstantList ::= (Constants) ConstantList COMMA ConstantDeclaration 
				|
				(OneConstant) ConstantDeclaration
				;
				
ConstantDeclaration ::= (ConstantDeclaration) IDENT:constName EQUAL Constant ;
				
Constant ::= (NumberConstant) NUMCONST:numConstant 
			|
			(CharConstant) CHARCONST:charConstant  
			|
			(BoolConstant) BOOLCONST:boolConstant 
			;
				
VarDecl ::= (VarDeclaration) Type VariablesList SEMICOLON
			/*|
			(ErrorVariableSemiColon)error SEMICOLON
			|
			(ErrorVariableComma)error COMMA VariablesList SEMICOLON*/ 
			;

VariablesList ::= (Variables) VariablesList COMMA Variable 
				|
				(OneVariable) Variable 
				/*|
				(ErrorVariableComma) error COMMA
				|
				(ErrorVariableSemiColon) error */
				;	 
			
Variable ::= (VariableDecl) IDENT:varName ArrayBrackets:isArray
			|
			(ErrorVariable) error  {: parser.report_error("Greska kod deklaracije promenljive.", null); :}
			;					
										
ArrayBrackets ::= (HasArrayBrackets) LBRACKET RBRACKET
					|
				  (NoArrayBrackets) /*epsilon*/
				  ; 

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl 
				|
				(NoMethods) /*epsilon*/
				;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN MethodParameterList RPAREN MethodVariableList LBRACE MethodStatementList RBRACE;

MethodTypeName ::= (ReturnMethod) Type:returnType IDENT:methodName | (VoidMethod) VOID IDENT:methodName;

MethodParameterList ::= (MethodParameters) FormPars 
					|
					(NoMethodParameters) /* epsilon */
					/*|
					(FormalParametersListError) error*/
					;
					
FormPars ::= (FormalParameters) FormPars COMMA OneParam
			|
			(OneFormalParameter) OneParam
			/*|
			(FormalParameterError) error */
			;

OneParam ::= (OneParameter) Type:argumentType IDENT:argumentName ArrayBrackets:isArray
				|
				(OneParameterError)error   {: parser.report_error("Greska kod deklaracije formalnog parametra funkcije. ", null); :};			

/*Parameter ::= (OneParameter)Type IDENT ArrayBrackets
				|
			  (OneParameterError ) error 
			;*/
			
MethodVariableList ::= (MethodVariables) MethodVariableList VarDecl
					|
					(NoMethodVariables) /* epsilon */
					;

MethodStatementList ::= (MethodStatements) MethodStatementList Statement
					|
					(NoMethodStatements) /* epsilon */
					;

Statement ::= (DesignatorStmt) DesignatorStatement SEMICOLON
				|
			 	(ReadStatement) READ LPAREN Designator RPAREN SEMICOLON
			 	|
			 	(PrintStatement) PRINT LPAREN Expr PrintConstant RPAREN SEMICOLON
			 	|
			 	(IfElseStatement) IfStart Then Statement ElseStart ElseStatement
			 	|
			 	(IfStatement) IfStart Then Statement
			 	|
			 	(WhileStatement) While LPAREN Condition RPAREN Statement
			 	|
			 	(BreakStatement) BREAK SEMICOLON
			 	|
			 	(ContinueStatement) CONTINUE SEMICOLON
			 	|
			 	(ReturnStatement) RETURN SEMICOLON
			 	|
			 	(ReturnExpression) RETURN Expr SEMICOLON
			 	|
			 	(ForEachStatement) Designator DOT ForEach ARROW Statement RPAREN SEMICOLON
			 	|
			 	(MultipleStatements) LBRACE StatementsList RBRACE
			 	;
			 	
ForStatements ::= (ForStatements) Statement;

IfStart ::= (IfStart) IF;

Then ::= (Then) LPAREN Condition RPAREN ;

ElseStart ::= (ElseStart) ELSE;	

ElseStatement ::= (ElseStatement) Statement;		 	
			 	
While ::= (WhileLoop) WHILE;

WhileStatements ::= (WhileStatements) RPAREN;
 
ForEach ::= (ForEachLoop) FOREACH LPAREN IDENT:ident;
			 	
StatementsList ::= (Statements) StatementsList Statement
				|
				(NoStatement) /*epsilon */
			 	;
			 	
PrintConstant ::= (HasPrintConstant) COMMA NUMCONST
					|
				  (NoPrintConstant) /*epsilon*/
				  ;	

DesignatorStatement ::= (ValueIncrement) Designator INCREMENT 
						|
						(ValueDecrement) Designator DECREMENT
						|
						(Assignment) Designator EQUAL AssignmentExpr
						|
						(FuncionCall) FunctionName LPAREN ActParams RPAREN
						|
						(MultipleAssignment) LBRACKET DesignatorList RBRACKET EQUAL MultipleDesignator
						;

MultipleDesignator ::= (MultipleAssignmentDesignator)Designator
						|
						(MultipleAssignmentError) error {: parser.report_error("Greska kod konstrukcije iskaza dodele. ", null); :}
						;
						
AssignmentExpr ::= (AssignmentExpression) Expr
					|
					(AssignmentExprError) error  {: parser.report_error("Greska kod konstrukcije iskaza dodele. ", null); :}
					;
					
DesignatorList ::= (Designators) DesignatorList COMMA DesignatorListElement 
				   |
				   (OneDesignatorListElement) DesignatorListElement
				   ;	
				   			
DesignatorListElement ::= (OneDesignatorElement)Designator 
						  |
						  (NoDesignatorElement)/*epsilon*/
						  ;
						
Expr ::= (NegativeExpression) MINUS TermList | (Expression) TermList ;

TermList ::= (Terms) TermList Addop Term | (OneTerm) Term ; 

Term ::= (Term) FactorList ;

FactorList ::= (Factors) FactorList Mulop Factor | (OneFactor) Factor ;

Factor ::= (FactorNumber) NUMCONST
			|
			(FactorCharacter) CHARCONST
			|
			(FactorBoolean) BOOLCONST
			|
			(BracketExpression) LPAREN Expr RPAREN
			|
			(ArrayCreation) NEW Type LBRACKET Expr RBRACKET
			|
			/*(ObjectCreation) NEW Type LPAREN ActParams RPAREN
			|*/
			(FunctionCall) FunctionName LPAREN ActParams RPAREN
			|
			(FactorDesignator) Designator
			;

FunctionName ::= (FunctionName) Designator ; 
			
ActParams ::= (ActualParams) ActPars 
				|
				(NoActualParams) /* epsilon */
				;

ActPars ::= (ActParsList) ActPars COMMA Parameter 
			|
			(OneActParameter) Parameter
			;	
Parameter ::= (Parameter) Expr ;

Condition ::= (Conditions) Condition Or CondTerm 
			  |
			  (OneCondition) CondTerm 
			  |
			  (ConditionError)error
			 {: parser.report_error("Greska kod logickog izraza. Izvrsen oporavak do ) ", null); :}
			  ;
Or ::= (Or) OR;

CondTerm ::= (ConditionTerms) CondTerm AND CondFact 
			|
			(ConditionTerm) CondFact
			;

CondFact ::= (ConditionFacts) Expr:expr1 Relop Expr:expr2 
			|
			(ConditionFact) Expr
			;			

/* 
Designator := ident [ "[" Expr "]" ]. 
*/
						
Designator ::= (OneDesignator) IDENT:designatorName 
				| 
				(ArrayDesignator) DesignatorName LBRACKET Expr RBRACKET 
				;
				
DesignatorName ::= (DesignatorName) IDENT:designatorName;

Relop ::= (IsEqual) ISEQUAL | (NotEqual) NOTEQUAL | (Greater) GT | (GreaterEqual) GTE | (LessThan) LT | (LessThanEqual) LTE ;

Addop ::= (Plus) PLUS | (Minus) MINUS ;

Mulop ::= (Multiply) MULTIPLY | (Divide) DIVIDE | (Moduo) MODUO ;

Type ::= (Type) IDENT:typeName ;