package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

import java_cup.runtime.*;
import org.apache.log4j.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


nonterminal ForEach ForEach;
nonterminal While While;
nonterminal DeclarationList DeclarationList;
nonterminal Declaration Declaration;
nonterminal ConstDecl ConstDecl;
nonterminal ConstantList ConstantList;
nonterminal VarDecl VarDecl;
nonterminal VariablesList VariablesList;
nonterminal ArrayBrackets ArrayBrackets;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodParameterList MethodParameterList;
nonterminal FormPars FormPars;
nonterminal MethodVariableList MethodVariableList;
nonterminal MethodStatementList MethodStatementList;
nonterminal Statement Statement;
nonterminal PrintConstant PrintConstant;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorList DesignatorList;
nonterminal DesignatorListElement DesignatorListElement;
nonterminal ActParams ActParams;
nonterminal ActPars ActPars;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
terminal PROG, LBRACE, RBRACE, CONST, VOID, SEMICOLON, READ, PRINT, INCREMENT, DECREMENT, NEW, LPAREN, RPAREN, COMMA, DOT, LBRACKET, RBRACKET, EQUAL, ISEQUAL, NOTEQUAL, GT, GTE, LT, LTE, AND, OR, PLUS, MINUS, MULTIPLY, DIVIDE, MODUO;


terminal IF, ELSE, WHILE, BREAK, CONTINUE, RETURN, FOREACH, ARROW;
nonterminal StatementsList StatementsList;
terminal CLASS, THIS, COLON, DO, EXTENDS, ENUM;

terminal String IDENT;
terminal Character CHARCONST;
terminal Integer NUMCONST;
terminal Boolean BOOLCONST;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramIdentificator, ConstantDeclaration, Variable, MethodTypeName, OneParameter, FunctionName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Constant, Expr, TermList, Factor, Parameter, FactorList, Term, Condition, CondTerm, CondFact, AssignmentExpr;
 

precedence left ELSE;


Program ::= (Program) PROG ProgramIdentificator:programIdent DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(programIdent, D1, M2); RESULT.setLine(programIdentleft); :} ;

ProgramIdentificator ::= (ProgramIdentificator) IDENT:progIdent {: RESULT=new ProgramIdentificator(progIdent); RESULT.setLine(progIdentleft); :} ;

DeclarationList ::= (Declarations) DeclarationList:D1 Declaration:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :} 
				|
				(NoDeclarations) {: RESULT=new NoDeclarations(); :} /*epsilon*/
				;

Declaration ::= (CnstDeclaration) ConstDecl:C1 {: RESULT=new CnstDeclaration(C1); RESULT.setLine(C1left); :} 
				|
				(VariableDeclaration) VarDecl:V1 {: RESULT=new VariableDeclaration(V1); RESULT.setLine(V1left); :} 
				/*|
				(ClassDeclaration) ClassDecl*/ 
				;
				
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstantList:C2 SEMICOLON {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :} ;


ConstantList ::= (Constants) ConstantList:C1 COMMA ConstantDeclaration:C2 {: RESULT=new Constants(C1, C2); RESULT.setLine(C1left); :} 
				|
				(OneConstant) ConstantDeclaration:C1 {: RESULT=new OneConstant(C1); RESULT.setLine(C1left); :}
				;
				
ConstantDeclaration ::= (ConstantDeclaration) IDENT:constName EQUAL Constant:C1 {: RESULT=new ConstantDeclaration(constName, C1); RESULT.setLine(constNameleft); :} ;
				
Constant ::= (NumberConstant) NUMCONST:numConstant {: RESULT=new NumberConstant(numConstant); RESULT.setLine(numConstantleft); :} 
			|
			(CharConstant) CHARCONST:charConstant {: RESULT=new CharConstant(charConstant); RESULT.setLine(charConstantleft); :}  
			|
			(BoolConstant) BOOLCONST:boolConstant {: RESULT=new BoolConstant(boolConstant); RESULT.setLine(boolConstantleft); :} 
			;
				
VarDecl ::= (VarDeclaration) Type:T1 VariablesList:V2 SEMICOLON {: RESULT=new VarDeclaration(T1, V2); RESULT.setLine(T1left); :}
			|
			(ErrorVariableSemiColon)error SEMICOLON {: RESULT=new ErrorVariableSemiColon(); :}
			|
			(ErrorVariableComma)error COMMA VariablesList:V1 SEMICOLON {: RESULT=new ErrorVariableComma(V1); RESULT.setLine(V1left); :} 
			;

VariablesList ::= (Variables) VariablesList:V1 COMMA Variable:V2 {: RESULT=new Variables(V1, V2); RESULT.setLine(V1left); :} 
				|
				(OneVariable) Variable:V1 {: RESULT=new OneVariable(V1); RESULT.setLine(V1left); :} 
				;	 

Variable ::= (Variable) IDENT:varName ArrayBrackets:isArray {: RESULT=new Variable(varName, isArray); RESULT.setLine(varNameleft); :} ;					
						
ArrayBrackets ::= (HasArrayBrackets) LBRACKET RBRACKET {: RESULT=new HasArrayBrackets(); :}
					|
				  (NoArrayBrackets) {: RESULT=new NoArrayBrackets(); :} /*epsilon*/
				  ; 

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :} 
				|
				(NoMethods) {: RESULT=new NoMethods(); :} /*epsilon*/
				;

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN MethodParameterList:M2 RPAREN MethodVariableList:M3 LBRACE MethodStatementList:M4 RBRACE {: RESULT=new MethodDecl(M1, M2, M3, M4); RESULT.setLine(M1left); :};

MethodTypeName ::= (ReturnMethod) Type:returnType IDENT:methodName {: RESULT=new ReturnMethod(returnType, methodName); RESULT.setLine(returnTypeleft); :} | (VoidMethod) VOID IDENT:methodName {: RESULT=new VoidMethod(methodName); RESULT.setLine(methodNameleft); :};

MethodParameterList ::= (MethodParameters) FormPars:F1 {: RESULT=new MethodParameters(F1); RESULT.setLine(F1left); :} 
					|
					(NoMethodParameters) {: RESULT=new NoMethodParameters(); :} /* epsilon */
					/*|
					(FormalParametersListError) error*/
					;
					
FormPars ::= (FormalParameters) FormPars:F1 COMMA OneParameter:O2 {: RESULT=new FormalParameters(F1, O2); RESULT.setLine(F1left); :}
			|
			(OneFormalParameter) OneParameter:O1 {: RESULT=new OneFormalParameter(O1); RESULT.setLine(O1left); :}
			/*|
			(FormalParameterError) error */
			;

OneParameter ::= (OneParameter) Type:argumentType IDENT:argumentName ArrayBrackets:isArray {: RESULT=new OneParameter(argumentType, argumentName, isArray); RESULT.setLine(argumentTypeleft); :} ;			

/*Parameter ::= (OneParameter)Type IDENT ArrayBrackets
				|
			  (OneParameterError ) error 
			;*/
			
MethodVariableList ::= (MethodVariables) MethodVariableList:M1 VarDecl:V2 {: RESULT=new MethodVariables(M1, V2); RESULT.setLine(M1left); :}
					|
					(NoMethodVariables) {: RESULT=new NoMethodVariables(); :} /* epsilon */
					;

MethodStatementList ::= (MethodStatements) MethodStatementList:M1 Statement:S2 {: RESULT=new MethodStatements(M1, S2); RESULT.setLine(M1left); :}
					|
					(NoMethodStatements) {: RESULT=new NoMethodStatements(); :} /* epsilon */
					;

Statement ::= (DesignatorStmt) DesignatorStatement:D1 SEMICOLON {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
				|
			 	(ReadStatement) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
			 	|
			 	(PrintStatement) PRINT LPAREN Expr:E1 PrintConstant:P2 RPAREN SEMICOLON {: RESULT=new PrintStatement(E1, P2); RESULT.setLine(E1left); :}
			 	|
			 	(IfElseStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseStatement(C1, S2, S3); RESULT.setLine(C1left); :}
			 	|
			 	(IfStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfStatement(C1, S2); RESULT.setLine(C1left); :}
			 	|
			 	(WhileStatement) While:W1 LPAREN Condition:C2 RPAREN Statement:S3 {: RESULT=new WhileStatement(W1, C2, S3); RESULT.setLine(W1left); :}
			 	|
			 	(BreakStatement) BREAK SEMICOLON {: RESULT=new BreakStatement(); :}
			 	|
			 	(ContinueStatement) CONTINUE SEMICOLON {: RESULT=new ContinueStatement(); :}
			 	|
			 	(ReturnStatement) RETURN SEMICOLON {: RESULT=new ReturnStatement(); :}
			 	|
			 	(ReturnExpression) RETURN Expr:E1 SEMICOLON {: RESULT=new ReturnExpression(E1); RESULT.setLine(E1left); :}
			 	|
			 	(ForEachStatement) Designator:D1 DOT ForEach:F2 LPAREN IDENT:ident ARROW Statement:S3 RPAREN SEMICOLON {: RESULT=new ForEachStatement(D1, F2, ident, S3); RESULT.setLine(D1left); :}
			 	|
			 	(MultipleStatements) LBRACE StatementsList:S1 RBRACE {: RESULT=new MultipleStatements(S1); RESULT.setLine(S1left); :}
			 	;
			 	
While ::= (WhileLoop) WHILE {: RESULT=new WhileLoop(); :};
 
ForEach ::= (ForEachLoop) FOREACH {: RESULT=new ForEachLoop(); :};
			 	
StatementsList ::= (Statements) StatementsList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatement) {: RESULT=new NoStatement(); :} /*epsilon */
			 	;
			 	
PrintConstant ::= (HasPrintConstant) COMMA NUMCONST:N1 {: RESULT=new HasPrintConstant(N1); RESULT.setLine(N1left); :}
					|
				  (NoPrintConstant) {: RESULT=new NoPrintConstant(); :} /*epsilon*/
				  ;	

DesignatorStatement ::= (ValueIncrement) Designator:D1 INCREMENT {: RESULT=new ValueIncrement(D1); RESULT.setLine(D1left); :} 
						|
						(ValueDecrement) Designator:D1 DECREMENT {: RESULT=new ValueDecrement(D1); RESULT.setLine(D1left); :}
						|
						(Assignment) Designator:D1 EQUAL AssignmentExpr:A2 {: RESULT=new Assignment(D1, A2); RESULT.setLine(D1left); :}
						|
						(FuncionCall) FunctionName:F1 LPAREN ActParams:A2 RPAREN {: RESULT=new FuncionCall(F1, A2); RESULT.setLine(F1left); :}
						|
						(MultipleAssignment) LBRACKET DesignatorList:D1 RBRACKET EQUAL Designator:D2 {: RESULT=new MultipleAssignment(D1, D2); RESULT.setLine(D1left); :}
						|
						(MultipleAssignmentError) LBRACKET DesignatorList:D1 RBRACKET EQUAL error {: RESULT=new MultipleAssignmentError(D1); RESULT.setLine(D1left); :} 
						;
						
AssignmentExpr ::= (AssignmentExpression) Expr:E1 {: RESULT=new AssignmentExpression(E1); RESULT.setLine(E1left); :}
					|
					(AssignmentExprError) error {: RESULT=new AssignmentExprError(); :}
					;
					
DesignatorList ::= (Designators) DesignatorList:D1 COMMA DesignatorListElement:D2 {: RESULT=new Designators(D1, D2); RESULT.setLine(D1left); :} 
				   |
				   (OneDesignatorListElement) DesignatorListElement:D1 {: RESULT=new OneDesignatorListElement(D1); RESULT.setLine(D1left); :}
				   ;	
				   			
DesignatorListElement ::= (OneDesignatorElement)Designator:D1 {: RESULT=new OneDesignatorElement(D1); RESULT.setLine(D1left); :} 
						  |
						  (NoDesignatorElement) {: RESULT=new NoDesignatorElement(); :}/*epsilon*/
						  ;
						
Expr ::= (NegativeExpression) MINUS TermList:T1 {: RESULT=new NegativeExpression(T1); RESULT.setLine(T1left); :} | (Expression) TermList:T1 {: RESULT=new Expression(T1); RESULT.setLine(T1left); :} ;

TermList ::= (Terms) TermList:T1 Addop:A2 Term:T3 {: RESULT=new Terms(T1, A2, T3); RESULT.setLine(T1left); :} | (OneTerm) Term:T1 {: RESULT=new OneTerm(T1); RESULT.setLine(T1left); :} ; 

Term ::= (Term) FactorList:F1 {: RESULT=new Term(F1); RESULT.setLine(F1left); :} ;

FactorList ::= (Factors) FactorList:F1 Mulop:M2 Factor:F3 {: RESULT=new Factors(F1, M2, F3); RESULT.setLine(F1left); :} | (OneFactor) Factor:F1 {: RESULT=new OneFactor(F1); RESULT.setLine(F1left); :} ;

Factor ::= (FactorNumber) NUMCONST:N1 {: RESULT=new FactorNumber(N1); RESULT.setLine(N1left); :}
			|
			(FactorCharacter) CHARCONST:C1 {: RESULT=new FactorCharacter(C1); RESULT.setLine(C1left); :}
			|
			(FactorBoolean) BOOLCONST:B1 {: RESULT=new FactorBoolean(B1); RESULT.setLine(B1left); :}
			|
			(BracketExpression) LPAREN Expr:E1 RPAREN {: RESULT=new BracketExpression(E1); RESULT.setLine(E1left); :}
			|
			(ArrayCreation) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new ArrayCreation(T1, E2); RESULT.setLine(T1left); :}
			|
			/*(ObjectCreation) NEW Type LPAREN ActParams RPAREN
			|*/
			(FunctionCall) FunctionName:F1 LPAREN ActParams:A2 RPAREN {: RESULT=new FunctionCall(F1, A2); RESULT.setLine(F1left); :}
			|
			(FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
			;

FunctionName ::= (FunctionName) Designator:D1 {: RESULT=new FunctionName(D1); RESULT.setLine(D1left); :} ; 
			
ActParams ::= (ActualParams) ActPars:A1 {: RESULT=new ActualParams(A1); RESULT.setLine(A1left); :} 
				|
				(NoActualParams) {: RESULT=new NoActualParams(); :} /* epsilon */
				;

ActPars ::= (ActParsList) ActPars:A1 COMMA Parameter:P2 {: RESULT=new ActParsList(A1, P2); RESULT.setLine(A1left); :} 
			|
			(OneActParameter) Parameter:P1 {: RESULT=new OneActParameter(P1); RESULT.setLine(P1left); :}
			;	
Parameter ::= (Parameter) Expr:E1 {: RESULT=new Parameter(E1); RESULT.setLine(E1left); :} ;

Condition ::= (Conditions) Condition:C1 OR CondTerm:C2 {: RESULT=new Conditions(C1, C2); RESULT.setLine(C1left); :} 
			  |
			  (OneCondition) CondTerm:C1 {: RESULT=new OneCondition(C1); RESULT.setLine(C1left); :} 
			  ;

CondTerm ::= (ConditionTerms) CondTerm:C1 AND CondFact:C2 {: RESULT=new ConditionTerms(C1, C2); RESULT.setLine(C1left); :} 
			|
			(ConditionTerm) CondFact:C1 {: RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); :}
			;

CondFact ::= (ConditionFacts) Expr:expr1 Relop:R1 Expr:expr2 {: RESULT=new ConditionFacts(expr1, R1, expr2); RESULT.setLine(expr1left); :} 
			|
			(ConditionFact) Expr:E1 {: RESULT=new ConditionFact(E1); RESULT.setLine(E1left); :}
			;			

/* 
Designator := ident [ "[" Expr "]" ]. 
*/
						
Designator ::= (OneDesignator) IDENT:designatorName {: RESULT=new OneDesignator(designatorName); RESULT.setLine(designatorNameleft); :} 
				| 
				(ArrayDesignator) IDENT:designatorName LBRACKET Expr:E1 RBRACKET {: RESULT=new ArrayDesignator(designatorName, E1); RESULT.setLine(designatorNameleft); :} 
				;

Relop ::= (IsEqual) ISEQUAL {: RESULT=new IsEqual(); :} | (NotEqual) NOTEQUAL {: RESULT=new NotEqual(); :} | (Greater) GT {: RESULT=new Greater(); :} | (GreaterEqual) GTE {: RESULT=new GreaterEqual(); :} | (LessThan) LT {: RESULT=new LessThan(); :} | (LessThanEqual) LTE {: RESULT=new LessThanEqual(); :} ;

Addop ::= (Plus) PLUS {: RESULT=new Plus(); :} | (Minus) MINUS {: RESULT=new Minus(); :} ;

Mulop ::= (Multiply) MULTIPLY {: RESULT=new Multiply(); :} | (Divide) DIVIDE {: RESULT=new Divide(); :} | (Moduo) MODUO {: RESULT=new Moduo(); :} ;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;