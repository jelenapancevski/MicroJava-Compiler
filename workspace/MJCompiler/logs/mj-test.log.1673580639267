INFO  04:29:19,054 - Compiling source file: C:\Users\Dell\Desktop\PP1\Projekat januarski rok\Compiler\workspace\MJCompiler\test\test.mj
INFO  04:29:19,112 - #2 program
INFO  04:29:19,112 - #47 test
INFO  04:29:19,113 - #5 const
INFO  04:29:19,114 - #47 int
INFO  04:29:19,115 - #47 nula
INFO  04:29:19,116 - #19 =
INFO  04:29:19,116 - #49 0
INFO  04:29:19,116 - #7 ;
INFO  04:29:19,117 - #5 const
INFO  04:29:19,118 - #47 int
INFO  04:29:19,118 - #47 jedan
INFO  04:29:19,118 - #19 =
INFO  04:29:19,118 - #49 1
INFO  04:29:19,118 - #7 ;
INFO  04:29:19,118 - #5 const
INFO  04:29:19,118 - #47 int
INFO  04:29:19,119 - #47 pet
INFO  04:29:19,119 - #19 =
INFO  04:29:19,119 - #49 5
INFO  04:29:19,119 - #7 ;
INFO  04:29:19,119 - #5 const
INFO  04:29:19,119 - #47 bool
INFO  04:29:19,119 - #47 isok
INFO  04:29:19,119 - #19 =
INFO  04:29:19,120 - #50 true
INFO  04:29:19,120 - #15 ,
INFO  04:29:19,120 - #47 notok
INFO  04:29:19,120 - #19 =
INFO  04:29:19,120 - #50 false
INFO  04:29:19,120 - #7 ;
INFO  04:29:19,120 - #5 const
INFO  04:29:19,120 - #47 char
INFO  04:29:19,120 - #47 chara
INFO  04:29:19,121 - #19 =
INFO  04:29:19,121 - #48 a
INFO  04:29:19,121 - #7 ;
INFO  04:29:19,121 - #47 int
INFO  04:29:19,121 - #47 niz
INFO  04:29:19,121 - #17 [
INFO  04:29:19,121 - #18 ]
INFO  04:29:19,121 - #15 ,
INFO  04:29:19,123 - #47 niz2
INFO  04:29:19,123 - #17 [
INFO  04:29:19,123 - #18 ]
INFO  04:29:19,123 - #15 ,
INFO  04:29:19,124 - #47 a
INFO  04:29:19,124 - #15 ,
INFO  04:29:19,125 - #47 b
INFO  04:29:19,125 - #7 ;
INFO  04:29:19,125 - #47 int
INFO  04:29:19,125 - #47 length1
INFO  04:29:19,126 - #15 ,
INFO  04:29:19,126 - #47 length2
INFO  04:29:19,126 - #7 ;
INFO  04:29:19,126 - #47 char
INFO  04:29:19,126 - #47 nizch
INFO  04:29:19,126 - #17 [
INFO  04:29:19,127 - #18 ]
INFO  04:29:19,127 - #7 ;
INFO  04:29:19,127 - #3 {
INFO  04:29:19,127 - #47 bool
INFO  04:29:19,128 - #47 isequal
INFO  04:29:19,128 - #13 (
INFO  04:29:19,128 - #47 int
INFO  04:29:19,128 - #47 arr1
INFO  04:29:19,128 - #17 [
INFO  04:29:19,129 - #18 ]
INFO  04:29:19,129 - #15 ,
INFO  04:29:19,129 - #47 int
INFO  04:29:19,129 - #47 arr2
INFO  04:29:19,129 - #17 [
INFO  04:29:19,129 - #18 ]
INFO  04:29:19,129 - #14 )
INFO  04:29:19,130 - #47 bool
INFO  04:29:19,131 - #47 isequal
INFO  04:29:19,131 - #7 ;
INFO  04:29:19,131 - #3 {
INFO  04:29:19,131 - #33 if
INFO  04:29:19,132 - #13 (
INFO  04:29:19,133 - #47 arr1
INFO  04:29:19,133 - #20 ==
INFO  04:29:19,134 - #47 arr2
INFO  04:29:19,136 - #14 )
INFO  04:29:19,136 - #47 isequal
INFO  04:29:19,137 - #19 =
INFO  04:29:19,137 - #50 true
INFO  04:29:19,137 - #7 ;
INFO  04:29:19,137 - #34 else
INFO  04:29:19,138 - #47 isequal
INFO  04:29:19,138 - #19 =
INFO  04:29:19,139 - #50 false
INFO  04:29:19,139 - #7 ;
INFO  04:29:19,139 - #38 return
INFO  04:29:19,140 - #47 isequal
INFO  04:29:19,140 - #7 ;
INFO  04:29:19,141 - #4 }
INFO  04:29:19,141 - #6 void
INFO  04:29:19,142 - #47 printintarray
INFO  04:29:19,142 - #13 (
INFO  04:29:19,143 - #47 int
INFO  04:29:19,144 - #47 array
INFO  04:29:19,145 - #17 [
INFO  04:29:19,145 - #18 ]
INFO  04:29:19,145 - #14 )
INFO  04:29:19,145 - #47 int
INFO  04:29:19,145 - #47 arr
INFO  04:29:19,145 - #7 ;
INFO  04:29:19,145 - #3 {
INFO  04:29:19,145 - #47 array
INFO  04:29:19,145 - #16 .
INFO  04:29:19,145 - #39 foreach
INFO  04:29:19,145 - #13 (
INFO  04:29:19,145 - #47 arr
INFO  04:29:19,145 - #40 =>
INFO  04:29:19,146 - #3 {
INFO  04:29:19,146 - #9 print
INFO  04:29:19,147 - #13 (
INFO  04:29:19,147 - #47 arr
INFO  04:29:19,147 - #14 )
INFO  04:29:19,148 - #7 ;
INFO  04:29:19,148 - #4 }
INFO  04:29:19,148 - #14 )
INFO  04:29:19,149 - #7 ;
INFO  04:29:19,149 - #4 }
INFO  04:29:19,149 - #6 void
INFO  04:29:19,149 - #47 printchararray
INFO  04:29:19,149 - #13 (
INFO  04:29:19,149 - #47 char
INFO  04:29:19,150 - #47 array
INFO  04:29:19,150 - #17 [
INFO  04:29:19,150 - #18 ]
INFO  04:29:19,150 - #14 )
INFO  04:29:19,150 - #47 char
INFO  04:29:19,150 - #47 arr
INFO  04:29:19,150 - #7 ;
INFO  04:29:19,150 - #3 {
INFO  04:29:19,150 - #47 array
INFO  04:29:19,150 - #16 .
INFO  04:29:19,150 - #39 foreach
INFO  04:29:19,150 - #13 (
INFO  04:29:19,150 - #47 arr
INFO  04:29:19,150 - #40 =>
INFO  04:29:19,150 - #3 {
INFO  04:29:19,150 - #9 print
INFO  04:29:19,150 - #13 (
INFO  04:29:19,150 - #47 arr
INFO  04:29:19,151 - #15 ,
INFO  04:29:19,151 - #49 2
INFO  04:29:19,151 - #14 )
INFO  04:29:19,151 - #7 ;
INFO  04:29:19,151 - #4 }
INFO  04:29:19,151 - #14 )
INFO  04:29:19,151 - #7 ;
INFO  04:29:19,151 - #4 }
INFO  04:29:19,151 - #6 void
INFO  04:29:19,151 - #47 main
INFO  04:29:19,151 - #13 (
INFO  04:29:19,151 - #14 )
INFO  04:29:19,152 - #47 int
INFO  04:29:19,152 - #47 bodovi
INFO  04:29:19,152 - #7 ;
INFO  04:29:19,152 - #47 int
INFO  04:29:19,152 - #47 counter
INFO  04:29:19,152 - #7 ;
INFO  04:29:19,152 - #47 int
INFO  04:29:19,152 - #47 arr
INFO  04:29:19,152 - #7 ;
INFO  04:29:19,152 - #3 {
INFO  04:29:19,152 - #8 read
INFO  04:29:19,152 - #13 (
INFO  04:29:19,152 - #47 length1
INFO  04:29:19,152 - #14 )
INFO  04:29:19,152 - #7 ;
INFO  04:29:19,152 - #8 read
INFO  04:29:19,153 - #13 (
INFO  04:29:19,153 - #47 length2
INFO  04:29:19,153 - #14 )
INFO  04:29:19,153 - #7 ;
INFO  04:29:19,153 - #47 niz
INFO  04:29:19,153 - #19 =
INFO  04:29:19,153 - #12 new
INFO  04:29:19,153 - #47 int
INFO  04:29:19,153 - #17 [
INFO  04:29:19,153 - #47 length1
INFO  04:29:19,153 - #18 ]
INFO  04:29:19,153 - #7 ;
INFO  04:29:19,153 - #47 niz2
INFO  04:29:19,154 - #19 =
INFO  04:29:19,154 - #12 new
INFO  04:29:19,154 - #47 int
INFO  04:29:19,154 - #17 [
INFO  04:29:19,154 - #47 length2
INFO  04:29:19,154 - #18 ]
INFO  04:29:19,154 - #7 ;
INFO  04:29:19,154 - #47 counter
INFO  04:29:19,155 - #19 =
INFO  04:29:19,155 - #49 0
INFO  04:29:19,155 - #7 ;
INFO  04:29:19,155 - #47 a
INFO  04:29:19,155 - #19 =
INFO  04:29:19,155 - #47 ord
INFO  04:29:19,155 - #13 (
INFO  04:29:19,156 - #47 chara
INFO  04:29:19,156 - #14 )
INFO  04:29:19,157 - #7 ;
INFO  04:29:19,158 - #35 while
INFO  04:29:19,158 - #13 (
INFO  04:29:19,159 - #47 counter
INFO  04:29:19,159 - #24 <
INFO  04:29:19,159 - #47 len
INFO  04:29:19,160 - #13 (
INFO  04:29:19,160 - #47 niz
INFO  04:29:19,160 - #14 )
INFO  04:29:19,161 - #14 )
INFO  04:29:19,161 - #3 {
INFO  04:29:19,161 - #47 niz
INFO  04:29:19,161 - #17 [
INFO  04:29:19,162 - #47 counter
INFO  04:29:19,162 - #18 ]
INFO  04:29:19,162 - #19 =
INFO  04:29:19,162 - #47 a
INFO  04:29:19,162 - #7 ;
INFO  04:29:19,162 - #47 a
INFO  04:29:19,162 - #10 ++
INFO  04:29:19,162 - #7 ;
INFO  04:29:19,163 - #4 }
INFO  04:29:19,163 - #47 niz
INFO  04:29:19,163 - #16 .
INFO  04:29:19,163 - #39 foreach
INFO  04:29:19,163 - #13 (
INFO  04:29:19,163 - #47 arr
INFO  04:29:19,163 - #40 =>
INFO  04:29:19,163 - #3 {
INFO  04:29:19,163 - #9 print
INFO  04:29:19,163 - #13 (
INFO  04:29:19,163 - #47 chr
INFO  04:29:19,164 - #13 (
INFO  04:29:19,164 - #47 arr
INFO  04:29:19,164 - #14 )
INFO  04:29:19,164 - #14 )
INFO  04:29:19,164 - #7 ;
INFO  04:29:19,164 - #4 }
INFO  04:29:19,164 - #14 )
INFO  04:29:19,164 - #47 b
ERROR 04:29:19,164 - 
Sintaksna greska na liniji 56
INFO  04:29:19,164 - #19 =
INFO  04:29:19,164 - #49 100
INFO  04:29:19,165 - #7 ;
INFO  04:29:19,165 - #47 counter
INFO  04:29:19,166 - #11 --
INFO  04:29:19,166 - #7 ;
INFO  04:29:19,166 - #35 while
INFO  04:29:19,166 - #13 (
INFO  04:29:19,166 - #47 counter
INFO  04:29:19,166 - #23 >=
INFO  04:29:19,166 - #49 0
INFO  04:29:19,166 - #14 )
INFO  04:29:19,166 - #3 {
INFO  04:29:19,167 - #47 niz2
INFO  04:29:19,167 - #17 [
ERROR 04:29:19,167 - Greska kod deklaracije formalnog parametra funkcije. 
INFO  04:29:19,167 - #47 counter
INFO  04:29:19,168 - #18 ]
INFO  04:29:19,168 - #19 =
INFO  04:29:19,168 - #47 b
INFO  04:29:19,168 - #7 ;
INFO  04:29:19,168 - #47 b
INFO  04:29:19,168 - #10 ++
INFO  04:29:19,168 - #7 ;
INFO  04:29:19,168 - #47 counter
INFO  04:29:19,168 - #11 --
INFO  04:29:19,168 - #7 ;
INFO  04:29:19,169 - #4 }
INFO  04:29:19,169 - #47 printintarray
INFO  04:29:19,169 - #13 (
ERROR 04:29:19,169 - 
Sintaksna greska na liniji 64
ERROR 04:29:19,169 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 64
