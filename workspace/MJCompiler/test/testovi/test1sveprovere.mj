// Test301

program test301

	const int nula = 0, jedan = 1, pet = 5; // ok constante
	
	const bool radi = true, neradi = 2; // ne ok constante
	
	const char slovoa = 'a', slovob =15; //ne ok constante 
	
	const char slovob = 'b';

	int niz[], niz2[], a, b; //ok
	char nizch[];				//ok
	bool isok;
	
	LEPO je; //nije ok 
	nizch nijeok ; // nije ok 
	
{
	int sum(int a, int b)int c;{
	c = a+b;
	return c;
	}
	int funca(char a, char b){
	niz = new int [5]; //ok
	niz2 = new int [slovoa]; //nije ok 
	nizch = new int [10]; // nije ok 
	print(a);
	print(b);
	return 1;
	}
	
	bool samearray(int arr1[], int arr2[]){
		return (arr1 == arr2); 
	}
	
	void foreachfunc()int broj; char slovo;{
		slovo.foreach(slovoa=>print(slovo);); // not ok
		
		niz.foreach(broj=>{			//ok
		print(broj);
		});
		
		nizch.foreach(slovo=>{
		if(slovo=='d') continue;						//ok
		print(slovo,2);
		if(slovo=='a') break;
		
		});
		
		niz.foreach(slovo=>{			//not ok
		print(slovo);
		});
	}
	
	void main()	
		int bodovi;
		bool bt;
		char slovo;
		int broj;
		
	{
		// TESTOVI ZA DesignatorStatement = Designator "(" [ActPars] ")" ";"
		
		funcb(); //not ok ne postoji
		niz(2); // not ok nije u pitanju funkcija
		funca(1); //not ok
		funca(1,2); //not ok
		funca(slovob,2); //not ok
		
		funca(slovoa,slovob); //ok
		
		// TESTOVI ZA PRINT 
		
		print (funca(slovoa,slovob)); // trebalo bi ok
		print (funca(slovoa,3)); //not ok
		
		// TESTOVI ZA DesignatorStatement = Designator ("++" | "--") ";"
		slovob++; //not ok - constanta
		radi--; //not ok - constanta
		niz++; // not ok niz je u pitanju
		nizch[2]--; // not ok niz je tipa boolean 
		
		niz[1]++; //ok
		niz[2]--; // ok
		
		// TESTOVI ZA Statement = "break".
		break; // not ok
		
		// TESTOVI ZA DesignatorStatement = Designator Assignop Expr ";"
		radi = false ; // not ok jer je constanta
		niz = 5; //not ok jer nije element niza
		niz[5]=5; //ok; 
		
		// TESTOVI ZA Designator = Designator "[" Expr "]"
		a = b[1]; //not ok b nije niz
		a = niz [slovoa]; // not ok slovoa nije tipa int
		a = niz[10]; //good;
		
		// TESTOVI ZA Term = Term Mulop Factor.
		a = b* funca(slovoa,slovob) ; //ok
		a = b *  slovoa ; // not ok
		a = a % 2; //ok
		b = a / 1; //ok
		
		// TESTOVI ZA Expr = Expr Addop Term. 
		b = 5 + slovoa; //not ok
		b = pet + a - jedan; //ok 
		
		// TESTOVI ZA Expr = "-" Term.
		b = - slovoa; //not ok
		b = -jedan; // ok
		
		// TESTOVI ZA ActPars = Expr {"," Expr}.
		a=sum(7,b); //ok
		b = sum(14-8+b,a%2); //ok
		b=sum(slovoa,a); //not ok
		b= sum(a,b);
		
		// TESTOVI ZA Statement = "print" "(" Expr ["," numConst] ")" ";".
		print(new int[7]); // not ok
		print ( -a+b,7);	//ok
		
		// TESTOVI ZA Statement = "read" "(" Designator ")" ";".
		read(a);	
		read(slovoa);	//not ok
		read(niz);	//not ok
		read(nizch[1]);
		
		// TESTOVI ZA CondFact = Expr Relop Expr.
		if( niz == niz2) read(niz[1]); // ok
		if( niz != nizch) read(nizch[2]); //not ok
		if( a > b) read(a); 		//ok
		else read(b);
		if((a+b-7) <= a) a= a+b-7; //ok
		else if(a*2-jedan) a = a*2/2; //not ok
		else if (a*2-jedan>=pet) a=pet*nula-b; //ok
		
		// TESTOVI ZA CondTerm = CondFact {"&&" CondFact}
		if ( bodovi < pet && a-3>=b) read(bodovi); //ok
			if ( bodovi < pet &&  a-3) read(bodovi); //not ok
		
		// TESTOVI ZA Condition = CondTerm {"||" CondTerm}
		if ( bodovi < pet ||  a-3) read(bodovi); //not ok
		if ( bodovi < pet ||  a-3>=b && b<a) read(bodovi); //ok
		
		// TESTOVI ZA Statement = break i Statement = "continue".
		while (a<b){	//ok
		a++;
		if(a%2==0) continue;
		if(a==7) break;
		
		}
		break; //not ok
		continue; //not ok
		
		// TESTOVI ZA Statement = "if" "(" Condition ")" Statement ["else" Statement].
		 if (slovoa < slovob) a=a+b; //ok
		 if (niz > bodovi) a=a+b; // not ok
		 if (niz == niz2) a = a+b; // ok
		 else if (niz[2]<slovoa) a = a-7; //not ok
		 else if (niz[3] >= 15) a = a-9;	//ok
		 
		 // TESTOVI ZA Statement = "while" "(" Condition ")" Statement .
		 while (slovoa>slovob) {	//ok
		 a=a+5;
		 if(a>7) break;
		 }
		 while (5-7){ // not ok
		 a=a-2;
		 }
		 // TESTOVI ZA Statement = Designator "." "foreach" "(" ident "=>" Statement ")" ";". 
		 foreachfunc();
		
		 // TESTOVI ZA DesignatorStatement = Designator Assignop Expr ";"
		 
		 a = 12 * (pet+niz[1]) ; //ok
		 b = slovoa + jedan; //not ok
		 slovoa = slovob;    // not ok
		 nizch = slovoa;  //not ok
		 nizch [5] = slovob; //ok
		 isok = slovoa==slovob;	
		 isok = true;
		
		// TESTOVI ZA FormPars = Type ident ["[" "]"] {"," Type ident ["[" "]"]}.
		samearray(a,b);	//not ok
		samearray(niz,nizch); // not ok
		samearray(niz, niz2); //ok
		
		// TESTOVI ZA DesignatorStatement = "[" [Designator] {"," [Designator]}"]" "=" Designator
		[] = niz; //  ok
		[slovoa,,slovob] = niz; //not ok slovoa i slovob constants
		[slovoa,,slovob] = nizch; // not ok slovoa i slovob constants
		[a,,b] = nizch; //nizch char a a i b int not ok
		[,,a,b] = niz ; //ok
		[niz[1],,a,niz[2]] = niz2 //ok
		
		
		bodovi = 0;
		bodovi++;
		bodovi = bodovi + jedan;
		bodovi = bodovi * pet;
		bodovi--;
		print(bodovi);
			
		
		niz = new int[3];
		niz[nula] = jedan;
		niz[1] = 2;
		niz[niz[jedan]] = niz[niz[0]] * 3;
		bodovi = niz[2]/niz[0];
		print(bodovi);
		print(niz[2]);
		
		
		[a,b] = niz;
		print(a);	// niz[0] -> 1
		print(b);	// niz[1] -> 2
		
		
		[,a,] = niz;
		print(a);	// niz[1] -> 2

		niz2 = new int[2];
		[niz2[0],,niz2[niz[nula]]] = niz;

		print(niz2[0]);	// niz[0] -> 1
		print(niz2[1]); // niz[2] -> 6 
		
		// [niz2[0],,,niz2[niz[nula]]] = niz; // runtime error!
		
		nizch = new char[3];
		nizch[0] = 'a';
		nizch[jedan] = 'b';
		nizch[pet - 3] = 'c';
		print(nizch[1]);
		print(nizch[jedan * 2]);
		
		
		
		
		
		read(bodovi);
		bodovi = -bodovi + (pet * a / 2 - jedan) * bodovi - (3 % 2 + 3 * 2 - 3); 
		print(bodovi);
			
	}
}


